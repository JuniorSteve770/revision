import React from "react";

const produitStructureEntretien = {
    fondamentaux: [
    { element: "Familles de produits", savoir: true, details: "Autocall, Reverse Convertible, Bonus, Phoenix, etc." },
    { element: "MÃ©canisme de payoff", savoir: true, details: "BarriÃ¨res, mÃ©moire de coupon, worst-of, conditionnels" },
    { element: "Sous-jacents", savoir: true, details: "Actions, indices, paniers worst-of ou best-of" },
    { element: "Cycle de vie", savoir: true, details: "Emission, observation, paiement des coupons, maturitÃ©" }
  ],
  composantsFinanciers: [
    { element: "Composant obligataire", savoir: true, details: "Actualisation via taux sans risque (courbe zÃ©ro-coupon)" },
    { element: "Composant optionnel", savoir: true, details: "Pricing Black-Scholes, Monte Carlo, binomial, etc." },
    { element: "VolatilitÃ© implicite", savoir: true, details: "Sourcing (vol surface), impact sur le pricing" },
    { element: "CorrÃ©lations", savoir: "moyen", details: "Panier worst-of : dÃ©pendance entre sous-jacents" },
    { element: "ModÃ¨le de volatilitÃ© locale/stochastique", savoir: false, details: "Heston, SABR, Dupire â€“ Ã  connaÃ®tre seulement si structuration poussÃ©e" }
  ],
  pricing: [
    { element: "Black-Scholes", savoir: true, exemple: "Vanille options (call/put)" },
    { element: "Monte Carlo", savoir: true, exemple: "Path-dependent options (autocall, lookback)" },
    { element: "Arbre binomial", savoir: "moyen", exemple: "Moins frÃ©quent mais utile en entretien" },
    { element: "ImplÃ©mentation", savoir: "moyen", exemple: "Python ou Excel : simulation de scÃ©narios de payoff" }
  ],
  casPratiques: [
    { element: "Actualisation de cashflows", savoir: true, exemple: "ZÃ©ro coupon sur 5 ans" },
    { element: "Construction de payoff", savoir: true, exemple: "Ã‰crire une formule de remboursement" },
    { element: "Pricing dâ€™un autocall simple", savoir: true, exemple: "Call + put + barriÃ¨re" },
    { element: "Stress test / analyse de sensibilitÃ©", savoir: "moyen", exemple: "Impact dâ€™un changement de vol/taux" }
  ],
  risquesEtHedging: [
    { element: "Risques du produit", important: true, details: "MarchÃ©, crÃ©dit, liquiditÃ©, modÃ¨le" },
    { element: "SensibilitÃ©s (Greeks)", important: true, details: "Delta, Vega, Gamma, Rho, Theta" },
    { element: "Couverture dynamique", important: "moyen", details: "Rebalancing selon barriÃ¨re, vol, etc." },
    { element: "CrÃ©dit/Counterparty Risk (OTC)", important: "moyen", details: "Collateralisation, CSA, etc." }
  ],
  reglementaire: [
    { element: "Term sheet", connaitre: true, exemple: "Savoir la lire/interprÃ©ter" },
    { element: "PRIIPs / KID", connaitre: "moyen", exemple: "Exigences de transparence et de coÃ»t" },
    { element: "EMIR / MiFID II", connaitre: false, exemple: "AvancÃ© sauf si compliance/structuration senior" }
  ],
    Part2__Front_Office_Front_Office_Profil_IT_Quant_Dev_Data_architectur: [
    { element: "Architecture microservices", savoir: "moyen", exemple: "REST API, gestion des services" },
    { element: "Message Queue / Broker", savoir: "moyen", exemple: "Kafka, RabbitMQ, Redis (streaming de donnÃ©es de marchÃ©)" },
    { element: "Connaissances cloud (AWS, Azure)", savoir: "moyen", exemple: "DÃ©ploiement simple, stockage, lambdas" },
    { element: "Orchestration", savoir: "moyen", exemple: "Airflow, cron, scripts automatisÃ©s" }
  ],
  produitsFinanciers: [
    { element: "Types de produits (actions, dÃ©rivÃ©s)", savoir: true, exemple: "Manipuler les donnÃ©es de marchÃ©" },
    { element: "Structures de donnÃ©es financiÃ¨res", savoir: true, exemple: "Courbe de taux, surface de volatilitÃ©, grilles de prix" },
    { element: "Data feeds", savoir: "moyen", exemple: "Bloomberg, Reuters, API marchÃ©, fixings" }
  ],
  programmation: [
    { element: "Structures de donnÃ©es", savoir: true, exemple: "Stack, queue, hash map, arbres" },
    { element: "ComplexitÃ© (Big O)", savoir: true, exemple: "Comprendre la performance des algorithmes" },
    { element: "Algorithmes classiques", savoir: true, exemple: "BFS, DFS, tri, recherche binaire" },
    { element: "Manipulation de donnÃ©es financiÃ¨res", savoir: true, exemple: "Pandas, NumPy, SQL sur gros volumes" },
    { element: "Programmation orientÃ©e objet", savoir: true, exemple: "HÃ©ritage, encapsulation, design patterns" },
    { element: "Fonctions fonctionnelles", savoir: true, exemple: "map, filter, reduce, lambda" }
  ],
  outilsLangages: [
    { element: "Python", savoir: true, exemple: "Traitement de donnÃ©es, automatisation, APIs" },
    { element: "SQL (avancÃ©)", savoir: true, exemple: "Jointures, fenÃªtres, agrÃ©gats" },
    { element: "C++ / Java / C#", savoir: "moyen", exemple: "Bas niveau, performance, OMS/EMS" },
    { element: "Excel / VBA", savoir: "moyen", exemple: "Macros de pricing, prototypage" },
    { element: "Git / GitLab / GitHub", savoir: true, exemple: "Collaboration, versionning" },
    { element: "Docker / Podman", savoir: "moyen", exemple: "Conteneurisation des outils de pricing" },
    { element: "API REST (FastAPI / Flask)", savoir: true, exemple: "Construction dâ€™outils interfacÃ©s" },
    { element: "Jupyter Notebook", savoir: true, exemple: "Prototypage, simulation, visualisation" }
  ],
  financeQuant: [
    { element: "ModÃ¨les de pricing (Black-Scholes, Monte Carlo)", savoir: true, exemple: "ImplÃ©menter un pricing simple" },
    { element: "Greeks", savoir: true, exemple: "Calcul numÃ©rique des sensibilitÃ©s" },
    { element: "Arbres binomiaux / trinÃ´miaux", savoir: "moyen", exemple: "Options exotiques" },
    { element: "VolatilitÃ© implicite / smile", savoir: "moyen", exemple: "Lecture et manipulation de surfaces" },
    { element: "Calibration (simple)", savoir: "moyen", exemple: "Ajustement de modÃ¨les Ã  la rÃ©alitÃ©" }
  ],
  scripting: [
    { element: "Monte Carlo (finance)", savoir: true, exemple: "Pricing, stress tests" },
    { element: "Backtesting d'une stratÃ©gie", savoir: true, exemple: "Script Python avec visualisation" },
    { element: "Script automation (ETL, pipeline)", savoir: true, exemple: "Extraction + stockage + envoi" },
    { element: "Tests unitaires (pytest / xUnit)", savoir: true, exemple: "SÃ©curiser ton code" }
  ],
  cas2Pratiques: [
    { element: "Coding live (algos)", savoir: true, exemple: "Inverser une matrice, parser un fichier" },
    { element: "SQL", savoir: true, exemple: "Jointure + top 5 sur dataset lourd" },
    { element: "Pricing Python", savoir: true, exemple: "Construire un autocall, simuler des scÃ©narios" },
    { element: "Data Cleaning", savoir: true, exemple: "Nettoyer des historiques boursiers avec Pandas" },
    { element: "API", savoir: true, exemple: "CrÃ©er une route /price?type=autocall avec Swagger" }
  ],
  livrables: [
    { element: "Jupyter Notebook clair et commentÃ©", savoir: true, exemple: "Explication pas Ã  pas, code exÃ©cutÃ©" },
    { element: "Code POO structurÃ© et rÃ©utilisable", savoir: true, exemple: "Architecture modulaire, patterns" },
    { element: "API REST sÃ©curisÃ©e avec Swagger", savoir: true, exemple: "Documentation + endpoints clairs" },
    { element: "Dashboard Excel ou Python", savoir: true, exemple: "Visualisation et interaction utilisateur" },
    { element: "Fichier SQL reproductible", savoir: true, exemple: "Vues, procÃ©dures stockÃ©es, testables" }
  ],
  entretien: [
    {
      question: "Comment se construit un autocall ?",
      niveauAttendu: "DÃ©taillÃ© + schÃ©ma"
    },
    {
      question: "Comment le price-t-on ?",
      niveauAttendu: "SÃ©parer obligataire + optionnel"
    },
    {
      question: "Que se passe-t-il si la volatilitÃ© monte ?",
      niveauAttendu: "Impact sur les options vendues et la valeur"
    },
    {
      question: "Donne-moi un cas avec actualisation et budget pour les options",
      niveauAttendu: "Savoir calculer et raisonner avec les formules"
    }
  ],

};


const Section = ({ title, data, keys }) => (
  <div className="mb-6">
    <h2 className="text-xl font-semibold mb-2">{title}</h2>
    <ul className="list-disc pl-6 space-y-1">
      {data.map((item, index) => (
        <li key={index}>
          <strong>{item.element || item.question} :</strong>{" "}
          {keys.map((key) => item[key] && (
            <span key={key}>[{key}: {item[key]}] </span>
          ))}
        </li>
      ))}
    </ul>
  </div>
);
const Page2 = () => {
  return (
    <div className="p-6 font-sans">
      <h3 className="text-2xl font-bold mb-4">
        ðŸ“˜ RÃ©vision : Produits StructurÃ©s / ðŸ§  âœ… Check-list Front Office â€“ Profil IT / Quant / Dev / Data
      </h3>

      {Object.entries(produitStructureEntretien).map(([sectionName, sectionData], index) => {
        if (sectionName === "entretien") {
          return (
            <div key={index} className="mb-6">
              <h2 className="text-xl font-semibold mb-2">ðŸ’¬ 7. Questions d'entretien</h2>
              <ul className="list-disc pl-6 space-y-1">
                {sectionData.map((q, i) => (
                  <li key={i}>
                    <strong>{q.question}</strong> â€” <em>{q.niveauAttendu}</em>
                  </li>
                ))}
              </ul>
            </div>
          );
        }

        // ClÃ©s possibles Ã  afficher
        const availableKeys = ["savoir", "details", "exemple", "important", "connaitre"];
        const usedKeys = availableKeys.filter((k) => sectionData.some((item) => item[k] !== undefined));

        // Format du titre (nom de clÃ© en camelCase -> en lisible)
        const title =
          sectionName.charAt(0).toUpperCase() +
          sectionName.slice(1).replace(/([A-Z])/g, " $1");

        return (
          <Section
            key={index}
            title={`ðŸ”¹ ${title}`}
            data={sectionData}
            keys={usedKeys}
          />
        );
      })}
    </div>
  );
};

export default Page2;
