// src/projects/Project1/pages/Page3.js
// src/projects/Project2/pages/Page1.js

import React, { useState, useEffect } from "react";
import "./Page.css";
// partie Solid OOP Multithreadx
// Flashcards pour le niveau basic

const basicSlides = [
  {
    "question": "Qu‚Äôest-ce que le principe de responsabilit√© unique (SRP) ?",
    "answer": "Une classe doit avoir **une seule responsabilit√©** m√©tier (un seul r√¥le).\nüîë Mauvais : `ClientService` g√®re tout (validation, stockage, mails).\nüîë Bon :\n```csharp\npublic class EmailService { public void Envoyer(...) {...} }\n```"
  },
  {
    "question": "Qu‚Äôest-ce que le principe Open/Closed (OCP) ?",
    "answer": "Une classe doit √™tre **ouverte √† l‚Äôextension**, mais **ferm√©e √† la modification**.\nüîë On utilise **l‚Äôh√©ritage ou l‚Äôabstraction**.\n```csharp\npublic abstract class Paiement { public abstract void Payer(); }\npublic class PaiementCarte : Paiement { public override void Payer() => Console.WriteLine(\"CB\"); }\n```"
  },
  {
    "question": "Qu‚Äôest-ce que le principe de substitution de Liskov (LSP) ?",
    "answer": "Une sous-classe doit pouvoir **remplacer** la classe de base **sans alt√©rer le comportement**.\nüî¥ Mauvais : `class Pingouin : Oiseau` avec une m√©thode `Voler()` qui jette une exception.\n‚úÖ Solution :\n```csharp\npublic interface IVolant { void Voler(); }\n```"
  },
  {
    "question": "Qu‚Äôest-ce que l‚ÄôInterface Segregation Principle (ISP) ?",
    "answer": "Il faut **√©viter les interfaces trop larges** : une classe ne doit impl√©menter **que ce dont elle a besoin**.\nüîë Mauvais :\n```csharp\ninterface IEmploye { void Travailler(); void Cuisiner(); }\n```\n‚úÖ Bon :\n```csharp\ninterface ICuisinier { void Cuisiner(); }\ninterface IDeveloppeur { void Programmer(); }\n```"
  },
  {
    "question": "Qu‚Äôest-ce que le Dependency Inversion Principle (DIP) ?",
    "answer": "Les modules haut niveau doivent **d√©pendre d‚Äôabstractions**, pas de classes concr√®tes.\n‚úÖ On utilise **l‚Äôinjection de d√©pendances** :\n```csharp\npublic interface IDatabase { void Sauvegarder(); }\npublic class Service { private readonly IDatabase _db;\npublic Service(IDatabase db) { _db = db; } }\n```"
  },
  {
    "question": "Comment appliquer concr√®tement les principes SOLID en C# ?",
    "answer": "‚úÖ Modulariser les r√¥les m√©tier (SRP)\n‚úÖ √âtendre via h√©ritage (OCP)\n‚úÖ Respecter l‚Äôh√©ritage logique (LSP)\n‚úÖ Diviser les interfaces (ISP)\n‚úÖ Injecter les d√©pendances via interfaces (DIP)\nüîë Exemple combin√© :\n```csharp\npublic interface ILogger { void Log(string msg); }\npublic class FichierLogger : ILogger { ... }\npublic class MonService { public MonService(ILogger logger) { ... } }\n```"
  },
  {
    "question": "Quelle est une bonne m√©taphore pour les principes SOLID ?",
    "answer": "üîπ **SRP** : Un employ√© ‚â† facturation + livraison + support.\nüîπ **OCP** : Ajouter une nouvelle prise sans d√©monter l‚Äôappareil.\nüîπ **LSP** : Une voiture √©lectrique remplace une thermique sans changer sa conduite.\nüîπ **ISP** : Une imprimante ‚â† scanner ‚â† fax ‚Üí interfaces s√©par√©es.\nüîπ **DIP** : Piloter une voiture sans d√©pendre de la marque (interface)."
  },
  {
    "question": "Quels sont les 4 piliers de la POO ?",
    "answer": "**Encapsulation** (masquer les donn√©es internes), **H√©ritage** (r√©utiliser les comportements), **Polymorphisme** (comportement adaptable), **Abstraction** (exposer uniquement l'essentiel).\nüîë Exemple :\n```csharp\npublic class Animal { public virtual void Crier() {} }\npublic class Chien : Animal { public override void Crier() => Console.WriteLine(\"Wouf\"); }\n```"
  },
  {
    "question": "Encapsulation : d√©finition + exemple ?",
    "answer": "**Masquer les donn√©es internes** via des propri√©t√©s.\nüîë Code : `private string nom; public string Nom { get; set; }`"
  },
  {
    "question": "H√©ritage : principe + exemple ?",
    "answer": "**R√©utiliser** les attributs/m√©thodes d‚Äôune classe parente.\nüîë Code : `class Chien : Animal { }`"
  },
  {
    "question": "Polymorphisme : utilit√© + exemple ?",
    "answer": "**Appeler une m√©thode** via une r√©f√©rence g√©n√©rique.\nüîë Code : `Animal a = new Chien(); a.Crier();`"
  },
  {
    "question": "Abstraction : but + exemple ?",
    "answer": "**Cacher les d√©tails** d‚Äôimpl√©mentation, exposer l‚Äôessentiel.\nüîë Code : `interface IAnimal { void Crier(); }`"
  },
  {
    "question": "Quelle diff√©rence entre Thread et Task en C# ? Quand les utiliser ?",
    "answer": "**Thread** = ex√©cution bas niveau, manuel. **Task** = abstraction haut niveau, plus facile √† g√©rer et cha√Ænable avec `await`.\nüîë Thread : `new Thread(MaMethode).Start();`\nüîë Task : `Task.Run(() => {...});`"
  },
  {
    "question": "√Ä quoi servent `async` et `await` ? Quelle relation entre eux ?",
    "answer": "`async` permet de d√©clarer une m√©thode asynchrone, `await` suspend la m√©thode sans bloquer le thread.\nüîë Code : `async Task MaMethode() { await Task.Delay(1000); }`"
  },
  {
    "question": "Qu‚Äôest-ce que le parall√©lisme et comment le mettre en ≈ìuvre ?",
    "answer": "**Parall√©lisme** = ex√©cution simultan√©e sur plusieurs c≈ìurs (CPU-bound).\nüîë Exemple : `Parallel.Invoke(() => ..., () => ...);`, `Parallel.For(0, 100, i => {...});`"
  },
  {
    "question": "Diff√©rences entre `Thread.Sleep()` et `Task.Delay()` ?",
    "answer": "`Thread.Sleep()` bloque le thread. `Task.Delay()` attend sans bloquer (asynchrone).\nüîë Bloquant : `Thread.Sleep(1000);`\nüîë Non bloquant : `await Task.Delay(1000);`"
  },
  {
    "question": "Comment rendre le `Main` asynchrone et pourquoi ?",
    "answer": "`async Main()` permet l‚Äôutilisation directe de `await` au d√©marrage du programme (C# 7.1+).\nüîë Code : `static async Task Main() { await ...; }`"
  },
  {
    "question": "Quels types de t√¢ches conviennent au parall√©lisme avec `Parallel.For` ?",
    "answer": "**T√¢ches CPU-bound ind√©pendantes**, ex : calculs, traitement par lot, simulations.\nüîë Code : `Parallel.For(0, n, i => { ... });`"
  },
  {
    "question": "Quels sont les inconv√©nients de g√©rer les threads manuellement ?",
    "answer": "**Complexit√© √©lev√©e** : cr√©ation, synchronisation, erreurs. Risques de **bugs de concurrence**.\nüîë Code : `Thread t = new Thread(...); t.Start();`"
  },
  {
    "question": "Qu‚Äôest-ce qu‚Äôun `Task<T>` et comment obtenir sa valeur ?",
    "answer": "`Task<T>` est une t√¢che async qui retourne une **valeur**.\nüîë Code : `async Task<int> Calcul() => 2 + 2;`\nüîë Appel : `int res = await Calcul();`"
  },
  {
    "question": "Quand pr√©f√©rer `async/await` √† un thread ?",
    "answer": "`async/await` est id√©al pour les **op√©rations I/O non bloquantes** (fichiers, API), tandis que les threads sont adapt√©s aux **t√¢ches parall√®les intensives** (CPU-bound)."
  },
  {
    "question": "Donne une m√©taphore p√©dagogique de `async/await` vs Thread",
    "answer": "`Thread` = ouvrier actif qu‚Äôon contr√¥le manuellement. `async/await` = d√©l√©guer un travail et continuer, √™tre averti √† la fin. Comme envoyer un mail et ne pas attendre devant la bo√Æte."
  },
  {
    "question": "Qu‚Äôest-ce que LINQ en C# et √† quoi sert-il ?",
    "answer": "**LINQ** = Language Integrated Query. Permet de filtrer, projeter et agr√©ger des collections de mani√®re d√©clarative.\nüîë Exemple : `var even = list.Where(x => x % 2 == 0);`"
  },
  {
    "question": "Qu‚Äôest-ce que PLINQ et comment l'utiliser ?",
    "answer": "**PLINQ** = Parallel LINQ. Extension de LINQ pour ex√©cuter les requ√™tes **en parall√®le**.\nüîë Exemple : `var result = data.AsParallel().Where(x => x > 10);`"
  },
  {
    "question": "Quand pr√©f√©rer `async/await` √† un thread ?",
    "answer": "`async/await` est id√©al pour les **op√©rations I/O non bloquantes** (fichiers, API), tandis que les threads sont adapt√©s aux **t√¢ches parall√®les intensives** (CPU-bound)."
  },
  {
    "question": "Donne une m√©taphore p√©dagogique de `async/await` vs Thread",
    "answer": "`Thread` = ouvrier actif qu‚Äôon contr√¥le manuellement. `async/await` = d√©l√©guer un travail et continuer, √™tre averti √† la fin. Comme envoyer un mail et ne pas attendre devant la bo√Æte."
  }


];
// QCM pour les niveaux moyen et avanc√©
const questions = {
  moyen: [

       {
    "question": "Quel principe SOLID stipule qu'une classe ne doit avoir qu'une seule responsabilit√© ?",
    "options": [
      "Open/Closed Principle",
      "Liskov Substitution Principle",
      "Single Responsibility Principle",
      "Interface Segregation Principle"
    ],
    "answer": "Single Responsibility Principle",
    "explanation": "Le SRP (Single Responsibility Principle) est le premier principe SOLID qui impose qu'une classe ne doit avoir qu'une seule raison de changer, c'est-√†-dire une seule responsabilit√©."
  },
  {
    "question": "Comment appliquer le principe Open/Closed en C# ?",
    "options": [
      "En modifiant directement la classe existante",
      "En utilisant l'h√©ritage et l'abstraction",
      "En copiant-collant le code",
      "En utilisant des m√©thodes statiques"
    ],
    "answer": "En utilisant l'h√©ritage et l'abstraction",
    "explanation": "Le principe Open/Closed recommande d'√©tendre le comportement via l'h√©ritage ou l'abstraction (interfaces, classes abstraites) plut√¥t que de modifier le code existant."
  },
  {
    "question": "Quelle situation viole le principe de substitution de Liskov ?",
    "options": [
      "Une sous-classe qui √©tend toutes les m√©thodes de sa classe m√®re",
      "Une sous-classe qui lance une exception dans une m√©thode override",
      "Une sous-classe qui ajoute de nouvelles m√©thodes",
      "Une sous-classe qui impl√©mente une interface"
    ],
    "answer": "Une sous-classe qui lance une exception dans une m√©thode override",
    "explanation": "Le LSP exige qu'une sous-classe puisse remplacer sa classe m√®re sans alt√©rer le comportement attendu. Lancer une exception dans une m√©thode override est une violation typique."
  },
  {
    "question": "Quel est le but principal de l'encapsulation en POO ?",
    "options": [
      "Rendre le code plus difficile √† comprendre",
      "Masquer les d√©tails d'impl√©mentation",
      "Augmenter les performances",
      "R√©duire le nombre de classes"
    ],
    "answer": "Masquer les d√©tails d'impl√©mentation",
    "explanation": "L'encapsulation permet de cacher les d√©tails internes d'une classe et de n'exposer que ce qui est n√©cessaire, via des propri√©t√©s et m√©thodes publiques."
  },
  {
    "question": "Quelle syntaxe C# illustre le mieux le polymorphisme ?",
    "options": [
      "class Animal {} class Chien : Animal {}",
      "Animal a = new Animal();",
      "Animal a = new Chien(); a.Crier();",
      "interface IAnimal {}"
    ],
    "answer": "Animal a = new Chien(); a.Crier();",
    "explanation": "Le polymorphisme permet d'utiliser une instance de classe d√©riv√©e via une r√©f√©rence de classe de base, avec un comportement sp√©cifique √† la classe d√©riv√©e."
  },
  {
    "question": "Quelle est la diff√©rence principale entre Thread et Task en C# ?",
    "options": [
      "Thread est plus moderne que Task",
      "Task est une abstraction de plus haut niveau",
      "Thread ne peut pas √™tre annul√©",
      "Task est toujours synchrone"
    ],
    "answer": "Task est une abstraction de plus haut niveau",
    "explanation": "Task repr√©sente une op√©ration asynchrone et fournit un mod√®le de programmation plus simple que la gestion directe des threads, avec support natif de await/async."
  },
  {
    "question": "Quand doit-on utiliser async/await plut√¥t que des threads ?",
    "options": [
      "Pour les calculs intensifs sur CPU",
      "Pour les op√©rations I/O bound",
      "Pour les op√©rations n√©cessitant un contr√¥le pr√©cis des threads",
      "Pour les op√©rations n√©cessitant Thread.Sleep"
    ],
    "answer": "Pour les op√©rations I/O bound",
    "explanation": "async/await est optimis√© pour les op√©rations I/O bound (acc√®s r√©seau, fichiers) car il permet de lib√©rer les threads pendant les attentes."
  },
  {
    "question": "Quelle m√©thode permet d'attendre une t√¢che sans bloquer le thread ?",
    "options": [
      "Thread.Sleep(1000)",
      "Task.Delay(1000).Wait()",
      "await Task.Delay(1000)",
      "Thread.Yield()"
    ],
    "answer": "await Task.Delay(1000)",
    "explanation": "await Task.Delay() est la m√©thode non-bloquante pour attendre, contrairement √† Thread.Sleep() ou Wait() qui bloquent le thread."
  },
  {
    "question": "Quel est l'avantage principal de LINQ ?",
    "options": [
      "Am√©liorer les performances",
      "Remplacer les boucles for",
      "Fournir une syntaxe d√©clarative pour les requ√™tes",
      "R√©duire la taille du code ex√©cutable"
    ],
    "answer": "Fournir une syntaxe d√©clarative pour les requ√™tes",
    "explanation": "LINQ permet d'√©crire des requ√™tes sur des collections de mani√®re d√©clarative et lisible, similaire au SQL, plut√¥t qu'avec des boucles imp√©ratives."
  },
  {
    "question": "Quand doit-on utiliser PLINQ plut√¥t que LINQ ?",
    "options": [
      "Pour les petites collections",
      "Pour les requ√™tes simples",
      "Pour les op√©rations CPU-bound sur grandes collections",
      "Pour les op√©rations I/O bound"
    ],
    "answer": "Pour les op√©rations CPU-bound sur grandes collections",
    "explanation": "PLINQ (Parallel LINQ) est utile pour parall√©liser le traitement de grandes collections lorsque les op√©rations sont intensives en CPU."
  },
  {
    "question": "Comment impl√©menter correctement le Dependency Inversion Principle ?",
    "options": [
      "En instanciant directement les d√©pendances",
      "En utilisant le pattern Singleton",
      "En d√©pendant d'abstractions et utilisant l'injection de d√©pendances",
      "En rendant toutes les m√©thodes statiques"
    ],
    "answer": "En d√©pendant d'abstractions et utilisant l'injection de d√©pendances",
    "explanation": "Le DIP recommande de d√©pendre d'interfaces ou classes abstraites, avec des d√©pendances inject√©es (typiquement via le constructeur) plut√¥t qu'instanci√©es directement."
  },
  {
    "question": "Quelle est la caract√©ristique principale d'une interface bien con√ßue selon l'ISP ?",
    "options": [
      "Elle doit contenir le plus de m√©thodes possible",
      "Elle doit √™tre petite et cibl√©e",
      "Elle doit impl√©menter des m√©thodes par d√©faut",
      "Elle doit h√©riter d'au moins une autre interface"
    ],
    "answer": "Elle doit √™tre petite et cibl√©e",
    "explanation": "L'Interface Segregation Principle recommande de cr√©er des interfaces petites et sp√©cifiques plut√¥t que des interfaces larges contenant des m√©thodes inutiles pour certains clients."
  },
  {
    "question": "Quelle est la diff√©rence entre abstraction et encapsulation ?",
    "options": [
      "L'abstraction cache les d√©tails, l'encapsulation montre tout",
      "L'encapsulation cache les d√©tails, l'abstraction simplifie le mod√®le",
      "Il n'y a pas de diff√©rence",
      "L'abstraction concerne l'h√©ritage, l'encapsulation les interfaces"
    ],
    "answer": "L'encapsulation cache les d√©tails, l'abstraction simplifie le mod√®le",
    "explanation": "L'encapsulation prot√®ge les donn√©es internes, tandis que l'abstraction fournit un mod√®le simplifi√© en cachant la complexit√© de l'impl√©mentation."
  },
  {
    "question": "Pourquoi √©viter Thread.Sleep() dans du code asynchrone ?",
    "options": [
      "Parce que c'est obsol√®te",
      "Parce que √ßa bloque le thread",
      "Parce que c'est plus lent que Task.Delay",
      "Parce que √ßa consomme plus de m√©moire"
    ],
    "answer": "Parce que √ßa bloque le thread",
    "explanation": "Thread.Sleep() bloque le thread courant, ce qui annule les b√©n√©fices de l'asynchronisme, contrairement √† await Task.Delay() qui est non-bloquant."
  },
  {
    "question": "Quelle est la meilleure pratique pour g√©rer les d√©pendances selon SOLID ?",
    "options": [
      "Utiliser le pattern Singleton partout",
      "Instancier les d√©pendances dans les constructeurs",
      "Utiliser l'injection de d√©pendances via des interfaces",
      "D√©clarer toutes les d√©pendances comme statiques"
    ],
    "answer": "Utiliser l'injection de d√©pendances via des interfaces",
    "explanation": "L'injection de d√©pendances via des interfaces permet de respecter le Dependency Inversion Principle et rend le code plus testable et modulaire."
  },
  ],
  avance: 
  [
  {
    "question": "Quelle violation du LSP se cache dans ce code ?\n```csharp\nclass Rectangle { virtual int Width {get;set;} virtual int Height {get;set;} }\nclass Square : Rectangle { override int Width { set { base.Width = base.Height = value; } } }\n```",
    "options": [
      "Square modifie le comportement des setters",
      "Rectangle devrait √™tre sealed",
      "Square ne peut pas substituer Rectangle car cela brise les invariants",
      "Aucune violation, c'est une bonne impl√©mentation"
    ],
    "answer": "Square ne peut pas substituer Rectangle car cela brise les invariants",
    "explanation": "Un carr√© ne peut pas √™tre un substitut valide de rectangle car modifier une dimension affecte l'autre, ce qui viole les attentes du code client con√ßu pour Rectangle."
  },
  {
    "question": "Quel probl√®me r√©sout ce pattern dans une hi√©rarchie SOLID ?\n```csharp\ninterface IWorker { void Work(); }\ninterface IEater { void Eat(); }\nclass Human : IWorker, IEater { ... }\nclass Robot : IWorker { ... }\n```",
    "options": [
      "Violation du SRP",
      "Respect strict du LSP",
      "Application de l'ISP",
      "Optimisation pour le cache CPU"
    ],
    "answer": "Application de l'ISP",
    "explanation": "La s√©paration en interfaces fines (IWorker/IEater) plut√¥t qu'une grosse interface 'IHumanoid' illustre parfaitement l'Interface Segregation Principle."
  },
  {
    "question": "Pourquoi ce code viole-t-il l'OCP ?\n```csharp\nclass ReportGenerator {\n  public void Generate(string type) {\n    if (type == \"PDF\") { /* PDF */ }\n    else if (type == \"HTML\") { /* HTML */ }\n  }\n}```",
    "options": [
      "Il utilise des strings au lieu d'enums",
      "Il n√©cessite de modifier la classe pour ajouter un nouveau type",
      "Il ne respecte pas le SRP",
      "Il devrait √™tre static"
    ],
    "answer": "Il n√©cessite de modifier la classe pour ajouter un nouveau type",
    "explanation": "Pour ajouter un format (ex: CSV), il faut modifier la classe existante, ce qui viole l'Open/Closed Principle. Une solution serait d'utiliser une abstraction (IReportGenerator)."
  },
  {
    "question": "Quel est le probl√®me de ce d√©corateur ?\n```csharp\nclass CachedService : IService {\n  private IService _service;\n  private Dictionary<string, object> _cache = new();\n  public CachedService(IService s) { _service = s; }\n  public object Get(string key) {\n    if (!_cache.ContainsKey(key)) _cache[key] = _service.Get(key);\n    return _cache[key];\n  }\n}```",
    "options": [
      "Violation du SRP (cache + service)",
      "Probl√®me de concurrence (non thread-safe)",
      "Les deux r√©ponses pr√©c√©dentes",
      "Aucun probl√®me, c'est une bonne impl√©mentation"
    ],
    "answer": "Les deux r√©ponses pr√©c√©dentes",
    "explanation": "1) Le cache devrait √™tre externalis√© pour respecter le SRP. 2) L'acc√®s au dictionnaire n'est pas synchronis√©, ce qui est dangereux en multi-thread."
  },
  {
    "question": "Comment corriger ce code pour respecter le DIP ?\n```csharp\nclass OrderProcessor {\n  private SqlDatabase _db = new SqlDatabase();\n  public void Process(Order o) { _db.Save(o); }\n}```",
    "options": [
      "Rendre _db static",
      "Injecter IDatabase dans le constructeur",
      "Impl√©menter un pattern Singleton",
      "Utiliser des m√©thodes d'extension"
    ],
    "answer": "Injecter IDatabase dans le constructeur",
    "explanation": "Pour respecter le Dependency Inversion Principle, il faut d√©pendre d'une abstraction (IDatabase) inject√©e plut√¥t que de l'impl√©mentation concr√®te (SqlDatabase)."
  },
  {
    "question": "Quel anti-pattern illustre ce code async ?\n```csharp\nasync Task<int> Compute() {\n  var result = await Task.Run(() => {\n    Thread.Sleep(1000);\n    return 42;\n  });\n  return result;\n}```",
    "options": [
      "Async-over-sync",
      "Sync-over-async",
      "Double await inutile",
      "Mauvaise gestion des erreurs"
    ],
    "answer": "Async-over-sync",
    "explanation": "C'est un anti-pattern 'async-over-sync' : on encapsule du code synchrone (Thread.Sleep) dans Task.Run, ce qui consomme inutilement un thread pool."
  },
  {
    "question": "Pourquoi ce code est-il dangereux ?\n```csharp\nasync void Button_Click(object s, EventArgs e) {\n  await SomeAsyncOperation();\n}```",
    "options": [
      "Les exceptions sont ing√©rables",
      "Il bloque l'UI thread",
      "Il n√©cessite C# 9+",
      "Le mot-cl√© async est inutile"
    ],
    "answer": "Les exceptions sont ing√©rables",
    "explanation": "async void ne permet pas d'attendre ni de catcher les exceptions correctement. Il devrait retourner Task dans les handlers d'√©v√©nements."
  },
  {
    "question": "Quelle technique permet de d√©boguer ce deadlock ?\n```csharp\nasync Task Deadlock() {\n  var task = WaitAsync();\n  task.Wait(); // Bloque ici\n}\nasync Task WaitAsync() {\n  await Task.Delay(1000);\n}```",
    "options": [
      "Inspecter la fen√™tre Parallel Stacks",
      "Utiliser ConfigureAwait(false)",
      "Remplacer Wait() par await",
      "Toutes ces solutions"
    ],
    "answer": "Toutes ces solutions",
    "explanation": "1) Parallel Stacks montre les d√©pendances entre threads. 2) ConfigureAwait(false) √©vite le contexte de synchronisation. 3) await est la solution propre."
  },
  {
    "question": "Quelle optimisation apporte ce code PLINQ ?\n```csharp\nvar results = data.AsParallel()\n  .WithDegreeOfParallelism(Environment.ProcessorCount)\n  .Where(x => ExpensiveFilter(x))\n  .ToList();```",
    "options": [
      "Meilleure gestion de la m√©moire",
      "Limitation explicite du parall√©lisme",
      "Ex√©cution s√©quentielle forc√©e",
      "Cache des r√©sultats interm√©diaires"
    ],
    "answer": "Limitation explicite du parall√©lisme",
    "explanation": "WithDegreeOfParallelism() √©vite la surcharge en limitant le nombre de threads utilis√©s, particuli√®rement utile pour les op√©rations CPU-bound."
  },
  {
    "question": "Quel est l'effet de 'WithCancellation' dans cette requ√™te PLINQ ?\n```csharp\nvar results = source.AsParallel()\n  .WithCancellation(cts.Token)\n  .Select(x => Transform(x));```",
    "options": [
      "Am√©liore les performances",
      "Permet d'annuler la requ√™te",
      "Force l'ex√©cution s√©quentielle",
      "Active le logging d√©taill√©"
    ],
    "answer": "Permet d'annuler la requ√™te",
    "explanation": "WithCancellation permet d'interrompre une requ√™te PLINQ longue via un CancellationToken, essentiel pour les UIs ou services interruptibles."
  },
  {
    "question": "Pourquoi pr√©f√©rer ce pattern pour les factories async ?\n```csharp\ninterface IAsyncFactory<T> {\n  Task<T> CreateAsync();\n}```",
    "options": [
      "Pour supporter l'injection de d√©pendances",
      "Pour permettre l'initialisation asynchrone",
      "Pour respecter le SRP",
      "Pour am√©liorer les performances"
    ],
    "answer": "Pour permettre l'initialisation asynchrone",
    "explanation": "Certaines ressources n√©cessitent une initialisation asynchrone (fichiers, DB). Ce pattern permet de l'encapsuler proprement plut√¥t que d'utiliser des constructeurs sync."
  },
  {
    "question": "Quel est le risque de ce ValueTask ?\n```csharp\npublic ValueTask<int> Compute() {\n  if (_cache.TryGetValue(key, out var result))\n    return new ValueTask<int>(result); // Cas sync\n  return new ValueTask<int>(ComputeAsync()); // Cas async\n}```",
    "options": [
      "Double allocation m√©moire",
      "Appel simultan√© impossible",
      "Le ValueTask peut √™tre consomm√© une seule fois",
      "Gestion compliqu√©e des erreurs"
    ],
    "answer": "Le ValueTask peut √™tre consomm√© une seule fois",
    "explanation": "Un ValueTask ne doit √™tre await√© qu'une seule fois. Si le r√©sultat est r√©utilis√©, il faut convertir en Task via .AsTask() ou recr√©er le ValueTask."
  },
  {
    "question": "Comment garantir qu'une m√©thode est pure en C# ?\n```csharp\n[Pure]\nint Calculate(int a, int b) {\n  return a + b;\n}```",
    "options": [
      "Avec l'attribut [Pure] (System.Diagnostics.Contracts)",
      "En la marquant static",
      "Avec readonly struct",
      "C'est impossible √† garantir"
    ],
    "answer": "Avec l'attribut [Pure] (System.Diagnostics.Contracts)",
    "explanation": "L'attribut [Pure] indique que la fonction ne modifie pas l'√©tat observable (pas de side-effects). Les analyseurs de code peuvent v√©rifier cette propri√©t√©."
  },
  {
    "question": "Quelle technique permet de d√©boguer efficacement ce code ?\n```csharp\nvar result = await FetchDataAsync().ConfigureAwait(false);\nUpdateUI(result); // Crash ici```",
    "options": [
      "V√©rifier le SynchronizationContext",
      "Inspecter la pile d'appels asynchrone",
      "Utiliser Visual Studio's Parallel Stacks",
      "Toutes ces r√©ponses"
    ],
    "answer": "Toutes ces r√©ponses",
    "explanation": "Le crash vient probablement d'une tentative de mettre √† jour l'UI depuis un thread non-UI. Ces techniques aident √† tracer le flux d'ex√©cution asynchrone."
  },
  {
    "question": "Quelle est la particularit√© de ce pipeline LINQ ?\n```csharp\nvar query = data.Where(x => x.IsValid)\n  .AsParallel()\n  .Select(x => Transform(x))\n  .AsSequential()\n  .OrderBy(x => x.Date);```",
    "options": [
      "Il m√©lange traitement parall√®le et s√©quentiel",
      "Il est optimis√© pour les petites collections",
      "Il impl√©mente le pattern Producer/Consumer",
      "Il n√©cessite C# 10"
    ],
    "answer": "Il m√©lange traitement parall√®le et s√©quentiel",
    "explanation": "AsParallel() active le traitement parall√®le pour le filtrage et la transformation, tandis que AsSequential() d√©sactive le parall√©lisme pour le tri final qui n√©cessite un traitement s√©quentiel."
  }
]
};


// Timer
const Timer = ({ timeLeft }) => (
  <p className="timer">‚è≥ Temps restant : <span>{timeLeft}s</span></p>
);

// Composant QCM
const QuestionCard = ({ question, options, onAnswerClick, timeLeft }) => (
  <div className="question-card">
    <h4>üí° {question}</h4>
    <Timer timeLeft={timeLeft} />
    <div className="options-container">
      {options.map((option, index) => (
        <button key={index} onClick={() => onAnswerClick(option, index)} className="option-button">
          {String.fromCharCode(65 + index)}.{option}
        </button>
      ))}
    </div>
  </div>
);

// Composant Flashcard
const Flashcard = ({ slide, index, total }) => (
  <div className="question-card" style={{ fontSize: '14px', margin: '0' }}>
    {/* <h5>üß† Flashcard {index + 1} / {total}</h5> */}
    <strong>Question : </strong>
    
    <strong>
      <p>
        <code style={{ fontFamily: 'monospace', whiteSpace: 'pre-wrap', lineHeight: '0.4' }}>
          {slide.question}
        </code>
      </p>
    </strong>  
      <pre style={{ margin: '0', padding: '2px', background: '#f5f5f5', borderRadius: '3px', overflowX: 'auto' }}>
        <p>
          <strong>R√©ponse :</strong> {slide.answer}
        </p>
      </pre>
  </div>
);




// Composant R√©sultat
const Results = ({ scores }) => {
  const totalScore = scores.moyen + scores.avance;
  const totalQuestions = Object.values(questions).flat().length;
  return (
    <div className="results">
      <h3>üéØ Score final : {totalScore} / {totalQuestions}</h3>
      <p>‚úÖ Niveau Moyen : {scores.moyen}</p>
      <p>‚úÖ Niveau Avanc√© : {scores.avance}</p>
      {totalScore > 3 ? (
        <h3 className="success">üöÄ Excellent travail ! Vous ma√Ætrisez bien les Produits !</h3>
      ) : (
        <p className="fail">üìö R√©visez encore un peu pour bien comprendre les concepts, ou retournez voir les flashcards !</p>
      )}
    </div>
  );
};

// Page principale
const Page2 = () => {
  const [level, setLevel] = useState("basic");
  const [currentSlide, setCurrentSlide] = useState(0);
  const [currentQuestion, setCurrentQuestion] = useState(0);
  const [scores, setScores] = useState({ moyen: 0, avance: 0 });
  const [timeLeft, setTimeLeft] = useState(20);
  const [showResult, setShowResult] = useState(false);
  const [message, setMessage] = useState("");

  // Timer pour les niveaux QCM
  useEffect(() => {
    if (level !== "basic" && !showResult && timeLeft > 0) {
      const timer = setTimeout(() => setTimeLeft(timeLeft - 1), 1000);
      return () => clearTimeout(timer);
    } else if (level !== "basic" && timeLeft === 0) {
      handleNextQuestion();
    }
  }, [timeLeft, level, showResult]);

  // Slide auto pour les flashcards
  useEffect(() => {
    if (level === "basic" && !showResult) {
      const interval = setInterval(() => {
        setCurrentSlide((prev) => {
          if (prev + 1 < basicSlides.length) {
            return prev + 1;
          } else {
            setLevel("moyen");
            setCurrentQuestion(0);
            setTimeLeft(20);
            return 0;
          }
        });
      }, 10000);
      return () => clearInterval(interval);
    }
  }, [level, showResult]);

const handleAnswerClick = (option, index) => {
  const currentQuestions = questions[level];
  const current = currentQuestions[currentQuestion];
  const correctAnswer = current.answer;

  const isCorrect =
    /^[A-D]$/.test(correctAnswer) // Si c‚Äôest une lettre
      ? index === correctAnswer.charCodeAt(0) - 65
      : option === correctAnswer; // Sinon compare le texte

  if (isCorrect) {
    setScores((prevScores) => ({ ...prevScores, [level]: prevScores[level] + 1 }));
    setMessage("‚úÖ Correct !");
  } else {
    setMessage(`‚ùå Incorrect ! La bonne r√©ponse √©tait : ${correctAnswer}\n ‚ÑπÔ∏è ${current.explanation}`);
  }

  setTimeout(handleNextQuestion, 2500);
};

  const handleNextQuestion = () => {
    const currentQuestions = questions[level];
    if (currentQuestion + 1 < currentQuestions.length) {
      setCurrentQuestion(currentQuestion + 1);
      setTimeLeft(20);
      setMessage("");
    } else {
      if (level === "moyen") {
        setLevel("avance");
      } else {
        setShowResult(true);
      }
      setCurrentQuestion(0);
      setTimeLeft(20);
      setMessage("");
    }
  };

  return (
    <div className="qcm-container">
      {showResult ? (
        <Results scores={scores} />
      ) : (
        <div>
          <h4 className="subtitle" style={{ fontSize: '10px', margin: '0' }}>
              Fixed Inc! üîπ Niveau : {level.toUpperCase()}
          </h4>

          {level === "basic" ? (
            <Flashcard slide={basicSlides[currentSlide]} index={currentSlide} total={basicSlides.length} />
          ) : (
            <QuestionCard
              question={questions[level][currentQuestion].question}
              options={questions[level][currentQuestion].options}
              onAnswerClick={handleAnswerClick}
              timeLeft={timeLeft}
            />
          )}

          {message && <p className="message">{message}</p>}
        </div>
      )}
    </div>
  );
};


export default Page2;