// src/projects/Project2/pages/Page1.js

import React, { useState, useEffect } from "react";
import "./Page.css";
// partie 
// Flashcards pour le niveau basic

const basicSlides = [
 
  {
    "question": "Comment d√©marre-t-on une macro ou une fonction en VBA ?",
    "answer": "**Sub...End Sub** d√©marre une macro, **Function...End Function** une fonction. Exemple : `Sub Test()`...`End Sub`, `Function Ajout(a, b)`...`Ajout = a + b`."
  },
  {
    "question": "Comment d√©clare-t-on et affecte-t-on une variable ou un objet ?",
    "answer": "**Dim** d√©clare une variable : `Dim i As Integer`. **Set** affecte un objet : `Set ws = Worksheets(\"Feuil1\")`."
  },
  {
    "question": "Quelles structures conditionnelles utiliser ?",
    "answer": "**If...Then...Else** pour une condition simple, **Select Case** pour plusieurs cas. Exemple : `If x > 5 Then`, `Select Case score`."
  },
  {
    "question": "Quelles boucles pour r√©p√©ter une action ?",
    "answer": "**For...Next** pour une boucle fixe : `For i = 1 To 10`. **Do While...Loop** pour une boucle conditionnelle : `Do While i < 5`."
  },
  {
    "question": "Comment cibler une cellule dans Excel ?",
    "answer": "**Range(\"A1\")** cible une cellule nomm√©e, **Cells(1,1)** par index. Les deux permettent lecture/√©criture via `.Value`."
  },
  {
    "question": "Comment optimiser le code avec un bloc ou d√©sactiver l‚Äôaffichage ?",
    "answer": "**With...End With** √©vite les r√©p√©titions : `With Range(\"A1\")...`. **Application.ScreenUpdating = False** acc√©l√®re les macros."
  },
  {
    "question": "Comment afficher ou saisir une valeur utilisateur ?",
    "answer": "**MsgBox** affiche un message, **InputBox** demande une saisie. Exemple : `nom = InputBox(\"Nom ?\")`, `MsgBox \"Bonjour \" & nom`."
  },
  {
    "question": "Comment nettoyer et analyser du texte ?",
    "answer": "**Trim()** supprime les espaces, **Len()** compte les caract√®res, **UCase()/LCase()** modifient la casse. Exemple : `UCase(\"abc\") = \"ABC\"`."
  },
  {
    "question": "Comment trier et copier des donn√©es Excel ?",
    "answer": "**Sort** trie une plage : `Range(...).Sort`, **PasteSpecial** colle sans formules : `.PasteSpecial xlPasteValues`."
  },
  {
    "question": "Comment g√©rer les erreurs ou cr√©er des feuilles dynamiquement ?",
    "answer": "**On Error Resume Next** ignore les erreurs, **Worksheets.Add** cr√©e une feuille. √Ä encadrer avec `On Error GoTo 0`."
  },
  {
    "question": "Comment cr√©er une interface utilisateur en VBA ?",
    "answer": "**UserForm** avec **TextBox**, **ComboBox**, **CommandButton** permet la saisie. Code associ√© via `btnValider_Click()`."
  },
  {
    "question": "Comment g√©n√©rer un graphique depuis VBA ?",
    "answer": "**ChartObjects()** permet de modifier un graphique. Exemple : `Chart.SetSourceData Range(\"A1:B10\")`."
  },
  {
    "question": "Comment placer un point d'arr√™t et ex√©cuter le code ligne par ligne ?",
    "answer": "üõë **Breakpoint (F9)** : Arr√™te l'ex√©cution √† une ligne. üîÅ **Step Into (F8)** : Ex√©cute ligne par ligne, y compris sous-fonctions. **Step Over (Shift+F8)** : Ignore les sous-proc√©dures. **Step Out (Ctrl+Shift+F8)** : Sort de la proc√©dure actuelle."
  },
  {
    "question": "Quelles sont les fen√™tres utiles pendant le d√©bogage ?",
    "answer": "ü™ü **Immediate (Ctrl+G)** : Tester du code, afficher avec `Debug.Print`. üëÅÔ∏è‚Äçüó®Ô∏è **Watch** : Suivre une variable/expression. üìã **Locals** : Affiche les variables locales en cours avec type et valeur."
  },
  {
    "question": "Quelles instructions permettent d‚Äôafficher des infos ou interrompre le code ?",
    "answer": "üñ®Ô∏è **Debug.Print** : Affiche une valeur dans Immediate. üõë **Stop** : Interrompt l'ex√©cution √† une ligne pr√©cise. Exemple : `Debug.Print \"x = \" & x`."
  },
  {
    "question": "Comment g√©rer ou intercepter une erreur en VBA ?",
    "answer": "‚ö†Ô∏è **On Error Resume Next** : Ignore l‚Äôerreur, passe √† la suite. üîÅ **On Error GoTo Label** : Redirige vers un bloc de traitement d‚Äôerreur (ex : `GestionErreur:`)."
  },
  {
    "question": "Comment afficher ou suivre la valeur d‚Äôune variable √† l‚Äôarr√™t ?",
    "answer": "üñ±Ô∏è **Survol souris** : Affiche la valeur en infobulle. ‚úçÔ∏è **√âdition √† chaud** : Modifier le code pendant l‚Äôarr√™t (hors boucles `For` d√©j√† actives)."
  },
  {
    "question": "Comment compiler et v√©rifier son code avant ex√©cution ?",
    "answer": "üîç **D√©bogage > Compiler** : V√©rifie les erreurs de syntaxe sans ex√©cuter. ‚úÖ Bon r√©flexe avant toute ex√©cution."
  },
  {
    "question": "√Ä quoi sert la barre d‚Äôoutils D√©bogage et comment l'utiliser ?",
    "answer": "üîß **Boutons D√©bogage** : ‚ñ∂Ô∏è Ex√©cuter, ‚è∏Ô∏è Pause, ‚èπÔ∏è Stop. üìç Inclut aussi les options Step Into/Over/Out pour le pas-√†-pas (F8, Shift+F8, etc.)."
  },
  {
    "question": "Comment naviguer dans l‚Äôenvironnement VBA efficacement ?",
    "answer": "üìÅ **Ctrl + R** : Explorateur de projets. üîç **Ctrl + F** : Recherche rapide. üß© **Fen√™tres Projets / Propri√©t√©s** : G√©rer les modules, formulaires et attributs."
  },
];
// QCM pour les niveaux moyen et avanc√©
const questions = {
  moyen: [

   {
    "question": "Comment interrompre l'ex√©cution d'une macro √† une ligne pr√©cise dans VBA ?",
    "options": [
      "En utilisant la commande Pause",
      "En ins√©rant un MsgBox",
      "En pla√ßant un point d'arr√™t (breakpoint)",
      "En utilisant Exit Sub"
    ],
    "answer": "En pla√ßant un point d'arr√™t (breakpoint)",
    "explanation": "Un breakpoint permet de suspendre l'ex√©cution √† une ligne donn√©e, facilitant l'analyse du code pendant le d√©bogage."
  },
  {
    "question": "Quelle diff√©rence existe-t-il entre 'Step Into' et 'Step Over' ?",
    "options": [
      "Step Into ex√©cute tout le module, Step Over l‚Äôignore",
      "Step Into entre dans les fonctions appel√©es, Step Over les ignore",
      "Step Over affiche les erreurs, Step Into les corrige",
      "Aucune diff√©rence : ce sont deux noms pour la m√™me action"
    ],
    "answer": "Step Into entre dans les fonctions appel√©es, Step Over les ignore",
    "explanation": "'Step Into' permet de suivre chaque appel de fonction en d√©tail, tandis que 'Step Over' les ex√©cute sans y entrer."
  },
  {
    "question": "√Ä quoi sert la fen√™tre 'Immediate' dans l‚Äôenvironnement VBA ?",
    "options": [
      "√Ä lister les erreurs syst√®me",
      "√Ä tester du code, afficher des r√©sultats ou modifier des variables",
      "√Ä afficher la hi√©rarchie des objets",
      "√Ä afficher des messages de MsgBox"
    ],
    "answer": "√Ä tester du code, afficher des r√©sultats ou modifier des variables",
    "explanation": "La fen√™tre Immediate est un outil puissant de test √† la vol√©e, tr√®s utile pour le d√©bogage rapide et interactif."
  },
  {
    "question": "Quelle commande permet d‚Äôignorer une erreur et de continuer l‚Äôex√©cution ?",
    "options": [
      "On Error GoTo",
      "Resume Next",
      "On Error Resume Next",
      "Err.Clear"
    ],
    "answer": "On Error Resume Next",
    "explanation": "Cette instruction ignore les erreurs qui se produisent et passe directement √† la ligne suivante, sans interruption du code."
  },
  {
    "question": "Quel est le r√¥le de 'Stop' dans une proc√©dure VBA ?",
    "options": [
      "Afficher une bo√Æte de message",
      "Supprimer une erreur",
      "Red√©marrer la macro",
      "Interrompre l'ex√©cution comme un breakpoint"
    ],
    "answer": "Interrompre l'ex√©cution comme un breakpoint",
    "explanation": "L‚Äôinstruction Stop agit comme un point d‚Äôarr√™t manuel et suspend le code √† l‚Äôendroit sp√©cifi√©."
  },
  {
    "question": "Comment activer la fen√™tre de surveillance d'une variable ?",
    "options": [
      "Par Ctrl + W",
      "Via la Watch Window",
      "En utilisant Debug.Print",
      "Par la fen√™tre de propri√©t√©s"
    ],
    "answer": "Via la Watch Window",
    "explanation": "La Watch Window permet de surveiller des variables sp√©cifiques, avec conditions si besoin, pendant le d√©bogage."
  },
  {
    "question": "Comment acc√©der rapidement √† l‚Äôexplorateur de projets VBA ?",
    "options": [
      "Avec Alt + F11",
      "Avec Ctrl + R",
      "Avec Ctrl + G",
      "Avec Shift + F8"
    ],
    "answer": "Avec Ctrl + R",
    "explanation": "Ctrl + R ouvre l‚ÄôExplorateur de projets, permettant de naviguer rapidement entre les modules, formulaires et classes."
  },
  {
    "question": "Quelle fen√™tre permet d‚Äôafficher toutes les variables en cours d‚Äôune proc√©dure ?",
    "options": [
      "Watch Window",
      "Immediate Window",
      "Variables locales (Locals)",
      "√âditeur de code"
    ],
    "answer": "Variables locales (Locals)",
    "explanation": "La fen√™tre Locals affiche dynamiquement toutes les variables, leur valeur, leur type et leur port√©e pendant l‚Äôex√©cution."
  },
  {
    "question": "Quel raccourci permet d‚Äôentrer dans une proc√©dure ligne par ligne ?",
    "options": [
      "F5",
      "F9",
      "Shift + F8",
      "F8"
    ],
    "answer": "F8",
    "explanation": "F8 active le mode 'Step Into', qui ex√©cute le code une ligne √† la fois, y compris dans les sous-proc√©dures appel√©es."
  },
  {
    "question": "Quelle est l'utilit√© de la commande 'D√©bogage > Compiler' ?",
    "options": [
      "Ex√©cuter la macro automatiquement",
      "Corriger les erreurs de logique",
      "V√©rifier les erreurs de syntaxe sans ex√©cution",
      "Cr√©er un fichier ex√©cutable du projet"
    ],
    "answer": "V√©rifier les erreurs de syntaxe sans ex√©cution",
    "explanation": "Compiler le projet permet de d√©tecter les erreurs de syntaxe avant m√™me d‚Äôex√©cuter la macro, un outil pr√©ventif efficace."
  }
  ],
  avance: [
    {
      "question": "Quelle est la syntaxe correcte pour d√©clarer une variable de type cha√Æne de caract√®res en VBA ?",
      "options": [
        "Dim texte As String",
        "String texte;",
        "Var texte = String",
        "texte = \"\""
      ],
      "answer": "Dim texte As String",
      "explanation": "En VBA, on utilise 'Dim nom As Type' pour d√©clarer une variable. Le type String est utilis√© pour le texte."
    },
    {
      "question": "Comment acc√©der √† la valeur de la cellule A1 dans une feuille Excel en VBA ?",
      "options": [
        "Cells(\"A1\").Value",
        "Range(1, \"A\").Value",
        "Range(\"A1\").Value",
        "Sheet1!A1"
      ],
      "answer": "Range(\"A1\").Value",
      "explanation": "Range(\"A1\") est la m√©thode standard pour r√©f√©rencer une cellule. .Value permet d'acc√©der √† son contenu."
    },
    {
      "question": "Quelle boucle permet d'it√©rer de 1 √† 10 en VBA ?",
      "options": [
        "For i = 1 To 10 Step 1",
        "While i < 10 ...",
        "Do Until i = 10 ...",
        "For Each i In Range(1,10)"
      ],
      "answer": "For i = 1 To 10 Step 1",
      "explanation": "La boucle For/Next est optimale pour un nombre d'it√©rations connu. 'Step 1' est implicite et peut √™tre omis."
    },
    {
      "question": "Comment filtrer un tableau Excel en VBA pour afficher les valeurs >1000 ?",
      "options": [
        "Range.AutoFilter Field:=1, Criteria1:=\">1000\"",
        "Range.Filter(1, \">1000\")",
        "Range.Find(\">1000\")",
        "Range.Sort(\">1000\")"
      ],
      "answer": "Range.AutoFilter Field:=1, Criteria1:=\">1000\"",
      "explanation": "AutoFilter est la m√©thode native avec param√®tres : Field = colonne, Criteria1 = condition."
    },
    {
      "question": "Quelle instruction permet de g√©rer les erreurs d'ex√©cution en VBA ?",
      "options": [
        "Try/Catch",
        "On Error Resume Next",
        "If Error Then ...",
        "ErrorHandler:"
      ],
      "answer": "On Error Resume Next",
      "explanation": "Structure sp√©cifique √† VBA qui ignore l'erreur et continue l'ex√©cution. √Ä utiliser avec pr√©caution."
    },
    {
      "question": "Comment d√©clarer une fonction calculant la TVA (20%) en VBA ?",
      "options": [
        "Function TVA(ht) ht*1.2 End Function",
        "Function TVA(ht As Double) As Double\n Return ht*0.2\nEnd Function",
        "Sub TVA(ht)\n ht*0.2\nEnd Sub",
        "Function TVA(ht As Double) As Double\n TVA = ht * 0.2\nEnd Function"
      ],
      "answer": "Function TVA(ht As Double) As Double\n TVA = ht * 0.2\nEnd Function",
      "explanation": "Une fonction VBA doit d√©clarer son type de retour, utiliser '=' pour affecter le r√©sultat, et se terminer par 'End Function'."
    },
    {
      "question": "Quelle m√©thode permet de trouver la derni√®re ligne utilis√©e dans la colonne A ?",
      "options": [
        "Cells(1,1).End(xlDown).Row",
        "Cells(Rows.Count,1).End(xlUp).Row",
        "Range(\"A:A\").Find(\"*\").Row",
        "Columns(1).LastRow"
      ],
      "answer": "Cells(Rows.Count,1).End(xlUp).Row",
      "explanation": "La m√©thode robuste : partir du bas de la feuille (Rows.Count) et remonter jusqu'√† la premi√®re cellule non vide (xlUp)."
    },
    {
      "question": "Comment cr√©er une nouvelle feuille nomm√©e \"Rapport\" en VBA ?",
      "options": [
        "Sheets.Add(\"Rapport\")",
        "Worksheets.Add.Name = \"Rapport\"",
        "CreateWorksheet(\"Rapport\")",
        "New Worksheet(\"Rapport\")"
      ],
      "answer": "Worksheets.Add.Name = \"Rapport\"",
      "explanation": "Worksheets.Add cr√©e la feuille, .Name permet de la renommer. G√©rer le cas o√π le nom existe d√©j√†."
    },
    {
      "question": "Quelle structure permet d'ex√©cuter du code seulement si une condition est vraie ?",
      "options": [
        "For i = 1 To N ...",
        "If condition Then ... End If",
        "Select Case ...",
        "Do While ... Loop"
      ],
      "answer": "If condition Then ... End If",
      "explanation": "La structure conditionnelle de base en VBA. Peut √™tre compl√©t√©e par ElseIf et Else."
    },
    {
      "question": "Comment optimiser les performances d'une macro VBA ?",
      "options": [
        "Application.Speed = True",
        "Application.ScreenUpdating = False",
        "FastMode On",
        "OptimizeVBA True"
      ],
      "answer": "Application.ScreenUpdating = False",
      "explanation": "D√©sactive l'actualisation d'√©cran pendant l'ex√©cution. √Ä combiner avec Calculation = xlManual et EnableEvents = False."
    },
    {
      "question": "Comment trier les donn√©es de la colonne A par ordre d√©croissant ?",
      "options": [
        "Range(\"A:A\").Sort Order:=xlDescending",
        "Range(\"A1\").CurrentRegion.Sort Key1:=Range(\"A1\"), Order1:=xlDescending",
        "Columns(1).Sort Direction:=Down",
        "Sort Column A Z->A"
      ],
      "answer": "Range(\"A1\").CurrentRegion.Sort Key1:=Range(\"A1\"), Order1:=xlDescending",
      "explanation": "CurrentRegion d√©tecte automatiquement le tableau adjacent. Key1 sp√©cifie la colonne de tri, Order1 la direction."
    },
    {
      "question": "Comment afficher une bo√Æte de dialogue de saisie en VBA ?",
      "options": [
        "MsgBox(\"Saisissez une valeur\")",
        "InputBox(\"Saisissez une valeur\")",
        "Dialog.Input(\"Saisie\")",
        "UserForm.Show"
      ],
      "answer": "InputBox(\"Saisissez une valeur\")",
      "explanation": "InputBox permet une saisie utilisateur simple. Toujours valider le r√©sultat (IsEmpty, IsNumeric...)."
    },
    {
      "question": "Quelle syntaxe permet de parcourir toutes les feuilles d'un classeur ?",
      "options": [
        "For Each ws In Workbook.Sheets",
        "For Each ws In Worksheets",
        "For i = 1 To Sheets.Count",
        "For Each ws In Excel.Worksheets"
      ],
      "answer": "For Each ws In Worksheets",
      "explanation": "Worksheets est la collection native. 'ws' devient une variable objet Worksheet dans la boucle."
    },
    {
      "question": "Comment ajouter une mise en forme conditionnelle pour colorer en rouge les valeurs <0 ?",
      "options": [
        "Range.FormatConditions.Add Type:=xlCellValue, Operator:=xlLess, Formula1:=\"0\"",
        "Range.Style = \"Red\" If Value < 0",
        "ConditionalFormatting.Add(\"A1\", \"<0\").Color = Red",
        "FormatIfNegative Range(\"A1\")"
      ],
      "answer": "Range.FormatConditions.Add Type:=xlCellValue, Operator:=xlLess, Formula1:=\"0\"",
      "explanation": "FormatConditions est l'objet natif. Type xlCellValue + Operator xlLess permet de d√©finir la condition."
    },
    {
      "question": "Comment copier-coller des valeurs (sans formules) en VBA ?",
      "options": [
        "Range.Copy Range.Paste",
        "Range.Copy Destination:=Range2",
        "Range.Copy\nRange.PasteSpecial xlPasteValues",
        "Range.Value = Range2.Value"
      ],
      "answer": "Range.Copy\nRange.PasteSpecial xlPasteValues",
      "explanation": "PasteSpecial avec xlPasteValues colle uniquement les valeurs. Nettoyer le clipboard apr√®s avec Application.CutCopyMode = False."
    },
    {
      "question": "Quelle m√©thode permet de cr√©er un graphique en VBA ?",
      "options": [
        "Charts.Add",
        "Worksheets.AddChart",
        "Shapes.AddChart",
        "Set chart = ActiveSheet.ChartObjects.Add(Left, Top, Width, Height)"
      ],
      "answer": "Set chart = ActiveSheet.ChartObjects.Add(Left, Top, Width, Height)",
      "explanation": "ChartObjects.Add cr√©e un objet graphique positionn√©. On peut ensuite d√©finir son type et ses donn√©es via Chart.SetSourceData."
    },
    {
      "question": "Comment d√©clencher une macro lorsqu'un utilisateur clique sur un bouton ?",
      "options": [
        "AssignMacro dans l'√©diteur de bouton",
        "Button.OnClick = \"Macro\"",
        "ActiveX CommandButton avec code dans l'√©v√©nement Click",
        "Shapes(\"Button\").Macro = \"NomMacro\""
      ],
      "answer": "ActiveX CommandButton avec code dans l'√©v√©nement Click",
      "explanation": "Soit via un bouton ActiveX (code dans Sheet) soit un bouton Form (macro assign√©e). La r√©ponse couvre le cas ActiveX."
    },
    {
      "question": "Comment v√©rifier si un fichier existe avant de l'ouvrir ?",
      "options": [
        "If File.Exists(path) Then",
        "If Dir(path) <> \"\" Then",
        "If IsFile(path) Then",
        "If CanOpen(path) Then"
      ],
      "answer": "If Dir(path) <> \"\" Then",
      "explanation": "Dir() est la fonction VBA native qui retourne une cha√Æne vide si le fichier n'existe pas."
    },
    {
      "question": "Quelle structure permet de g√©rer plusieurs conditions mutuellement exclusives ?",
      "options": [
        "If...ElseIf...End If",
        "Select Case...End Select",
        "Choose(index, options)",
        "Switch(cond1, res1, cond2, res2)"
      ],
      "answer": "Select Case...End Select",
      "explanation": "Plus lisible que des If imbriqu√©s quand on teste une variable contre plusieurs valeurs possibles."
    },
    {
      "question": "Comment arr√™ter proprement l'ex√©cution d'une macro en cours ?",
      "options": [
        "Stop",
        "Exit Sub",
        "End",
        "CancelExecution"
      ],
      "answer": "Exit Sub",
      "explanation": "Quitte la proc√©dure proprement. 'End' est √† √©viter (termine brutalement l'application). 'Stop' pause le d√©bogueur."
    }

  ]
};


// Timer
const Timer = ({ timeLeft }) => (
  <p className="timer">‚è≥ Temps restant : <span>{timeLeft}s</span></p>
);

// Composant QCM
const QuestionCard = ({ question, options, onAnswerClick, timeLeft }) => (
  <div className="question-card">
    <h4>üí° {question}</h4>
    <Timer timeLeft={timeLeft} />
    <div className="options-container">
      {options.map((option, index) => (
        <button key={index} onClick={() => onAnswerClick(option, index)} className="option-button">
          {String.fromCharCode(65 + index)}.{option}
        </button>
      ))}
    </div>
  </div>
);

// Composant Flashcard
const Flashcard = ({ slide, index, total }) => (
  <div className="question-card" style={{ fontSize: '14px', margin: '0' }}>
    {/* <h5>üß† Flashcard {index + 1} / {total}</h5> */}
    <strong>Question : </strong>
    
    <strong>
      <p>
        <code style={{ fontFamily: 'monospace', whiteSpace: 'pre-wrap', lineHeight: '0.4' }}>
          {slide.question}
        </code>
      </p>
    </strong>  
      <pre style={{ margin: '0', padding: '2px', background: '#f5f5f5', borderRadius: '3px', overflowX: 'auto' }}>
        <p>
          <strong>R√©ponse :</strong> {slide.answer}
        </p>
      </pre>
  </div>
);




// Composant R√©sultat
const Results = ({ scores }) => {
  const totalScore = scores.moyen + scores.avance;
  const totalQuestions = Object.values(questions).flat().length;
  return (
    <div className="results">
      <h3>üéØ Score final : {totalScore} / {totalQuestions}</h3>
      <p>‚úÖ Niveau Moyen : {scores.moyen}</p>
      <p>‚úÖ Niveau Avanc√© : {scores.avance}</p>
      {totalScore > 3 ? (
        <h3 className="success">üöÄ Excellent travail ! Vous ma√Ætrisez bien les Produits !</h3>
      ) : (
        <p className="fail">üìö R√©visez encore un peu pour bien comprendre les concepts, ou retournez voir les flashcards !</p>
      )}
    </div>
  );
};

// Page principale
const Page3 = () => {
  const [level, setLevel] = useState("basic");
  const [currentSlide, setCurrentSlide] = useState(0);
  const [currentQuestion, setCurrentQuestion] = useState(0);
  const [scores, setScores] = useState({ moyen: 0, avance: 0 });
  const [timeLeft, setTimeLeft] = useState(20);
  const [showResult, setShowResult] = useState(false);
  const [message, setMessage] = useState("");

  // Timer pour les niveaux QCM
  useEffect(() => {
    if (level !== "basic" && !showResult && timeLeft > 0) {
      const timer = setTimeout(() => setTimeLeft(timeLeft - 1), 1000);
      return () => clearTimeout(timer);
    } else if (level !== "basic" && timeLeft === 0) {
      handleNextQuestion();
    }
  }, [timeLeft, level, showResult]);

  // Slide auto pour les flashcards
  useEffect(() => {
    if (level === "basic" && !showResult) {
      const interval = setInterval(() => {
        setCurrentSlide((prev) => {
          if (prev + 1 < basicSlides.length) {
            return prev + 1;
          } else {
            setLevel("moyen");
            setCurrentQuestion(0);
            setTimeLeft(20);
            return 0;
          }
        });
      }, 10000);
      return () => clearInterval(interval);
    }
  }, [level, showResult]);

const handleAnswerClick = (option, index) => {
  const currentQuestions = questions[level];
  const current = currentQuestions[currentQuestion];
  const correctAnswer = current.answer;

  const isCorrect =
    /^[A-D]$/.test(correctAnswer) // Si c‚Äôest une lettre
      ? index === correctAnswer.charCodeAt(0) - 65
      : option === correctAnswer; // Sinon compare le texte

  if (isCorrect) {
    setScores((prevScores) => ({ ...prevScores, [level]: prevScores[level] + 1 }));
    setMessage("‚úÖ Correct !");
  } else {
    setMessage(`‚ùå Incorrect ! La bonne r√©ponse √©tait : ${correctAnswer}\n ‚ÑπÔ∏è ${current.explanation}`);
  }

  setTimeout(handleNextQuestion, 2500);
};

  const handleNextQuestion = () => {
    const currentQuestions = questions[level];
    if (currentQuestion + 1 < currentQuestions.length) {
      setCurrentQuestion(currentQuestion + 1);
      setTimeLeft(20);
      setMessage("");
    } else {
      if (level === "moyen") {
        setLevel("avance");
      } else {
        setShowResult(true);
      }
      setCurrentQuestion(0);
      setTimeLeft(20);
      setMessage("");
    }
  };

  return (
    <div className="qcm-container">
      {showResult ? (
        <Results scores={scores} />
      ) : (
        <div>
          <h4 className="subtitle" style={{ fontSize: '10px', margin: '0' }}>
              Fixed Inc! üîπ Niveau : {level.toUpperCase()}
          </h4>

          {level === "basic" ? (
            <Flashcard slide={basicSlides[currentSlide]} index={currentSlide} total={basicSlides.length} />
          ) : (
            <QuestionCard
              question={questions[level][currentQuestion].question}
              options={questions[level][currentQuestion].options}
              onAnswerClick={handleAnswerClick}
              timeLeft={timeLeft}
            />
          )}

          {message && <p className="message">{message}</p>}
        </div>
      )}
    </div>
  );
};


export default Page3;